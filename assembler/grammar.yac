%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>




#define MEMIMM_BASE 0
#define IMM_BASE 0x8000
#define JMP_BASE 0xc000
#define RR_BASE  0xe000

#define MEMIMM_OPC_SHIFT 11
#define IMM_OPC_SHIFT 11
#define RR_OPC_SHIFT 9

#define OPC_ADD  0x0 
#define OPC_SUB  0x1
#define OPC_MUL  0x2 
#define OPC_DIV  0x3 
#define OPC_AND  0x4 
#define OPC_OR  0x5
#define OPC_XOR  0x6 
#define OPC_MOV  0x7 
#define OPC_ADC  0x8 
#define OPC_SBC  0x9 
#define OPC_RMOV  0xa 
#define OPC_CMP  0xb 
#define OPC_CPC  0xc 
#define OPC_LSL  0xd 
#define OPC_LSR  0xe 
#define OPC_ASR  0xf 

#define JMP_ABS  (1<<12)
#define JMP_COND  (1<<11)
#define JMP_CARRY  (1<<10)
#define JMP_INV (1<<9)
#define JMP_RES (1<<8)

#define RR_FLAG (1<<8)
#define RR_RNMP (1<<7)
#define RR_RDMP (1<<6)









typedef struct _par_ams{
	char* instr;
	char* op1;
	char* op2;
	char* label;
	int numops;
	int line;
	int instr_count;
	int labels_count;
}ASMPARAMS;

typedef struct __label{
	unsigned short addr_preset;
	unsigned short label_addr; // label addr in file
	char label_name[64]; //
}label;

label* labels;

#define EQSTR(s1,s2) (!strcasecmp(s1,s2))
ASMPARAMS* keked=NULL;
unsigned short instr_opcode=0;
FILE* infile=NULL;
FILE* outfile=NULL;
void yyerror(const char *str)
{
        fprintf(stderr,"error at line %d:  %s %s %s:\n%s\n", keked->line, keked->instr, keked->op1, keked->op2, str);
        exit(1);
}
 
int yywrap()
{
        return 1;
} 
  
void print_labels(){
	for (int i = 0; i < keked->labels_count; ++i)
	{
		printf("addr: %#x, addr_preset: %#x, name: %s\n", labels[i].label_addr, labels[i].addr_preset, labels[i].label_name);
	}
}


%}

%token LABEL REGISTER HEXNUM INSTRUCTION COMMA OPREF CLOSEREF COMMENT DECLABEL

%%

commands:
        | commands command
        ;

command:
		i1_label | i2_reg_reg | i2_mimm_reg | i2_rm_reg | i2_reg_mimm | i2_imm_reg | i2_reg_rm | linefeed | i0_label
        ;

i0_label:
		DECLABEL COMMENT
		{
			printf("OFFSWT %li\n",ftell(outfile));
			char fnd_l=0;
			keked->label[strlen(keked->label)-1]=0;
			for (int i = 0; i < keked->labels_count; ++i)
			{
				if(EQSTR(labels[i].label_name, keked->label)){ // if label already declared
					if(labels[i].addr_preset == 0){
						//TODO: overwrite jmpaddr in file
						printf("\n--\ncurrent addr: %x, label offs %x, imm %d\n", keked->instr_count, labels[i].label_addr, keked->instr_count- labels[i].label_addr);
						printf("overwrite %s\n",keked->label);
						fnd_l=1;
						labels[i].addr_preset=1;
						long int tell_tmp=ftell(outfile);
						printf("%li, %li\n", tell_tmp,9+labels[i].label_addr*5);
						fseek(outfile, 9+(labels[i].label_addr-1)*5+2, SEEK_SET);
						instr_opcode=0;
					instr_opcode=(unsigned char)(keked->instr_count- labels[i].label_addr);
					fprintf(outfile, "%02x", instr_opcode);
						fseek(outfile,tell_tmp,SEEK_SET);
						//labels[i].label_addr=keked->instr_count;
						continue;
					}
				}

			}
			if(!fnd_l){
					keked->labels_count++;
					label* lab_t = malloc(keked->labels_count*sizeof(label));
					memcpy(lab_t, labels, keked->labels_count*sizeof(label));
					free(labels);
					labels=lab_t;
					lab_t=NULL;
					label* t_lab=malloc(sizeof(label));
					t_lab->label_addr=keked->instr_count;
					t_lab->addr_preset=1;
					strncpy(t_lab->label_name, keked->label, 63);
					memcpy(&(labels[keked->labels_count-1]),t_lab,sizeof(label));
					//__asm__(:::"memory");
					printf("\n--\ndeclared %s\n",keked->label);
					free(t_lab);
			}
			//print_labels();
			printf( "DECLABEL: %s\n", keked->label);
			
			

		}



i1_label:
		INSTRUCTION LABEL COMMENT
		{
			printf("OFFSWT %li\n",ftell(outfile));
			char fnd_l=0;
			for (int i = 0; i < keked->labels_count; ++i)
			{
				if(EQSTR(labels[i].label_name, keked->label) && (labels[i].addr_preset != 0)){ // if label already declared

					printf("\n--\naccepted %s\n",keked->label);
					printf("current addr: %x, label offs %x, imm %i\n", keked->instr_count, labels[i].label_addr, keked->instr_count- labels[i].label_addr);
					fnd_l=1;
					instr_opcode=0;
					instr_opcode|=JMP_BASE|(unsigned char)(-keked->instr_count+ labels[i].label_addr);
						  if(EQSTR(keked->instr,"jmp")){
						  	__asm__ volatile ("nop");
					}else if(EQSTR(keked->instr,"jnc")){
						instr_opcode|=JMP_COND|JMP_INV|JMP_CARRY;
					}else if(EQSTR(keked->instr,"jc")){
						instr_opcode|=JMP_COND|JMP_CARRY;
					}else if(EQSTR(keked->instr,"jnz")){
						instr_opcode|=JMP_COND|JMP_INV;
					}else if(EQSTR(keked->instr,"jz")){
						instr_opcode|=JMP_COND;
					}else{
						yyerror("unknown instruction");
					}
					fprintf(outfile, "%4x ", instr_opcode);
					break;
				}

			}
			if(!fnd_l){
					keked->labels_count++;
					label* lab_t = malloc(keked->labels_count*sizeof(label));
					memcpy(lab_t, labels, keked->labels_count*sizeof(label));
					free(labels);
					labels=lab_t;
					lab_t=NULL;
					label* t_lab=malloc(sizeof(label));
					t_lab->label_addr=keked->instr_count;
					t_lab->addr_preset=0;
					strncpy(t_lab->label_name, keked->label, 63);
					memcpy(&(labels[keked->labels_count-1]),t_lab,sizeof(label));
					instr_opcode=0;
					instr_opcode|=JMP_BASE;
						  if(EQSTR(keked->instr,"jmp")){
						  	__asm__ volatile ("nop");
					}else if(EQSTR(keked->instr,"jnc")){
						instr_opcode|=JMP_COND|JMP_INV|JMP_CARRY;
					}else if(EQSTR(keked->instr,"jc")){
						instr_opcode|=JMP_COND|JMP_CARRY;
					}else if(EQSTR(keked->instr,"jnz")){
						instr_opcode|=JMP_COND|JMP_INV;
					}else if(EQSTR(keked->instr,"jz")){
						instr_opcode|=JMP_COND;
					}else{
						yyerror("unknown instruction");
					}
					fprintf(outfile, "%4x ", instr_opcode);
					printf("\n--\ndeclared %s\n",keked->label);
					free(t_lab);
			}
			//print_labels();
			printf( "JMPINSTR: { %s } { %s } \n", keked->instr, keked->label);
			
		};
i2_reg_reg:
		INSTRUCTION REGISTER COMMA REGISTER COMMENT 
		{
			printf( "2REGREG :{ %s } { %s } , { %s } \n",  keked->instr, keked->op1, keked->op2);
			instr_opcode=0;
			instr_opcode|=RR_BASE|((keked->op2[1]-'0')<<3)|(keked->op1[1]-'0');
			if(!EQSTR(keked->instr+3,"nf")){
				instr_opcode|=RR_FLAG;
			}
			keked->instr[3]=0;
				  if(EQSTR(keked->instr,"add")){
				instr_opcode|=(OPC_ADD)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"sub")){
				instr_opcode|=(OPC_SUB)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"mul")){
				instr_opcode|=(OPC_MUL)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"div")){
				instr_opcode|=(OPC_DIV)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"and")){
				instr_opcode|=(OPC_AND)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"orr")){
				instr_opcode|=(OPC_OR)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"xor")){
				instr_opcode|=(OPC_XOR)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"mov")){
				instr_opcode|=(OPC_MOV)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"adc")){
				instr_opcode|=(OPC_ADC)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"sbb")){
				instr_opcode|=(OPC_SBC)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"cmp")){
				instr_opcode|=(OPC_CMP)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"cpc")){
				instr_opcode|=(OPC_CPC)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"shl")){
				instr_opcode|=(OPC_LSL)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"shr")){
				instr_opcode|=(OPC_LSR)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"asr")){
				instr_opcode|=(OPC_ASR)<<RR_OPC_SHIFT;
			}else{
				yyerror("unknown instruction");
			}
			fprintf(outfile, "%4x ", instr_opcode);
		};

i2_reg_rm:
		 INSTRUCTION REGISTER COMMA OPREF REGISTER CLOSEREF COMMENT 

		{
			printf( "2REGRM  : { %s } { %s } , [ { %s } ] \n",  keked->instr, keked->op1, keked->op2);
			instr_opcode=0;
			instr_opcode|=RR_BASE|((keked->op2[1]-'0')<<3)|(keked->op1[1]-'0')|RR_RNMP;
			if(!EQSTR(keked->instr+3,"nf")){
				instr_opcode|=RR_FLAG;
			}
			keked->instr[3]=0;
				  if(EQSTR(keked->instr,"add")){
				instr_opcode|=(OPC_ADD)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"sub")){
				instr_opcode|=(OPC_SUB)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"mul")){
				instr_opcode|=(OPC_MUL)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"div")){
				instr_opcode|=(OPC_DIV)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"and")){
				instr_opcode|=(OPC_AND)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"orr")){
				instr_opcode|=(OPC_OR)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"xor")){
				instr_opcode|=(OPC_XOR)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"mov")){
				instr_opcode|=(OPC_MOV)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"adc")){
				instr_opcode|=(OPC_ADC)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"sbb")){
				instr_opcode|=(OPC_SBC)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"cmp")){
				instr_opcode|=(OPC_CMP)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"cpc")){
				instr_opcode|=(OPC_CPC)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"shl")){
				instr_opcode|=(OPC_LSL)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"shr")){
				instr_opcode|=(OPC_LSR)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"asr")){
				instr_opcode|=(OPC_ASR)<<RR_OPC_SHIFT;
			}else{
				yyerror("unknown instruction");
			}
			fprintf(outfile, "%4x ", instr_opcode);
		};

i2_rm_reg:
		 INSTRUCTION OPREF REGISTER CLOSEREF COMMA REGISTER COMMENT 
		{
			printf( "2RMREG  : { %s } [ { %s } ] , { %s }\n", keked->instr, keked->op1, keked->op2);
			instr_opcode=0;
			instr_opcode|=RR_BASE|((keked->op2[1]-'0')<<3)|(keked->op1[1]-'0')|RR_RDMP;
			if(!EQSTR(keked->instr+3,"nf")){
				instr_opcode|=RR_FLAG;
			}
			keked->instr[3]=0;

				  if(EQSTR(keked->instr,"add")){
				instr_opcode|=(OPC_ADD)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"sub")){
				instr_opcode|=(OPC_SUB)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"mul")){
				instr_opcode|=(OPC_MUL)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"div")){
				instr_opcode|=(OPC_DIV)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"and")){
				instr_opcode|=(OPC_AND)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"orr")){
				instr_opcode|=(OPC_OR)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"xor")){
				instr_opcode|=(OPC_XOR)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"mov")){
				instr_opcode|=(OPC_MOV)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"adc")){
				instr_opcode|=(OPC_ADC)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"sbb")){
				instr_opcode|=(OPC_SBC)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"cmp")){
				instr_opcode|=(OPC_CMP)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"cpc")){
				instr_opcode|=(OPC_CPC)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"shl")){
				instr_opcode|=(OPC_LSL)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"shr")){
				instr_opcode|=(OPC_LSR)<<RR_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"asr")){
				instr_opcode|=(OPC_ASR)<<RR_OPC_SHIFT;
			}else{
				yyerror("unknown instruction");
			}
			fprintf(outfile, "%4x ", instr_opcode);
		};

i2_imm_reg:
		INSTRUCTION REGISTER COMMA HEXNUM COMMENT 
		{
			printf( "2IMMREG : { %s } { %s } , { %s } \n", keked->instr, keked->op1, keked->op2);
			unsigned short hnum;
			if((keked->op2[1]=='x') || (keked->op2[1]=='X')){
				sscanf(keked->op2+2, "%hhx",&hnum);
			}else{
				sscanf(keked->op2, "%hhd",&hnum);
			}
			printf("%#4x\n", hnum);
			hnum&=0xff;
			printf("INSTR %s\n", keked->instr);
			instr_opcode=0;
			instr_opcode|=IMM_BASE ;
			printf("%#4x\n", instr_opcode);
			instr_opcode|=(keked->op1[1]-'0');
			printf("%#4x\n", instr_opcode);
			instr_opcode|= (hnum<<3);
			keked->instr[3]=0;
			printf("%#4x\n", instr_opcode);
				  if(EQSTR(keked->instr,"add")){
				instr_opcode|=(OPC_ADD)<<IMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"sub")){
				instr_opcode|=(OPC_SUB)<<IMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"mul")){
				instr_opcode|=(OPC_MUL)<<IMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"div")){
				instr_opcode|=(OPC_DIV)<<IMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"and")){
				instr_opcode|=(OPC_AND)<<IMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"orr")){
				instr_opcode|=(OPC_OR)<<IMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"xor")){
				instr_opcode|=(OPC_XOR)<<IMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"mov")){
				instr_opcode|=(OPC_MOV)<<IMM_OPC_SHIFT;
			}else{
				yyerror("unknown instruction");
			}
			fprintf(outfile, "%4x ", instr_opcode);
		};

i2_reg_mimm:
		INSTRUCTION REGISTER COMMA OPREF HEXNUM CLOSEREF COMMENT 
		{
			printf("2REGMIMM: { %s } { %s } , [ { %s } ] \n", keked->instr, keked->op1, keked->op2); 
			unsigned short hnum;
			if((keked->op2[1]=='x') || (keked->op2[1]=='X')){
				sscanf(keked->op2+2, "%hhx",&hnum);
			}else{
				sscanf(keked->op2, "%hhd",&hnum);
			}
			hnum&=0xff;
			instr_opcode=0;
			instr_opcode|=MEMIMM_BASE |(keked->op1[1]-'0')| (hnum<<3);
			keked->instr[3]=0;
				  if(EQSTR(keked->instr,"add")){
				instr_opcode|=(OPC_ADD)<<MEMIMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"sub")){
				instr_opcode|=(OPC_SUB)<<MEMIMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"mul")){
				instr_opcode|=(OPC_MUL)<<MEMIMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"div")){
				instr_opcode|=(OPC_DIV)<<MEMIMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"and")){
				instr_opcode|=(OPC_AND)<<MEMIMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"orr")){
				instr_opcode|=(OPC_OR)<<MEMIMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"xor")){
				instr_opcode|=(OPC_XOR)<<MEMIMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"mov")){
				instr_opcode|=(OPC_MOV)<<MEMIMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"adc")){
				instr_opcode|=(OPC_ADC)<<MEMIMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"sbb")){
				instr_opcode|=(OPC_SBC)<<MEMIMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"cmp")){
				instr_opcode|=(OPC_CMP)<<MEMIMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"cpc")){
				instr_opcode|=(OPC_CPC)<<MEMIMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"shl")){
				instr_opcode|=(OPC_LSL)<<MEMIMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"shr")){
				instr_opcode|=(OPC_LSR)<<MEMIMM_OPC_SHIFT;
			}else if(EQSTR(keked->instr,"asr")){
				instr_opcode|=(OPC_ASR)<<MEMIMM_OPC_SHIFT;
			}else{
				yyerror("unknown instruction");
			}
			fprintf(outfile, "%4x ", instr_opcode);
		} ;

i2_mimm_reg:
		INSTRUCTION OPREF HEXNUM CLOSEREF COMMA REGISTER COMMENT 
		{
			printf( "2MIMMREG: { %s } [ { %s } ] , { %s } \n",  keked->instr, keked->op1, keked->op2);
			unsigned short hnum;
			if((keked->op1[1]=='x') || (keked->op1[1]=='X')){
				sscanf(keked->op1+2, "%hhx",&hnum);
			}else{
				sscanf(keked->op1, "%hhd",&hnum);
			}
			printf("%#4x\n", hnum);
			hnum&=0xff;

			instr_opcode=0;
			instr_opcode|=MEMIMM_BASE |(keked->op2[1]-'0')| (hnum<<3);
			keked->instr[3]=0;
			if(EQSTR(keked->instr,"mov")){
				instr_opcode|=(OPC_RMOV)<<MEMIMM_OPC_SHIFT;
			}else{
				yyerror("unknown instruction");
			}
			fprintf(outfile, "%4x ", instr_opcode);
		};

linefeed:
		COMMENT
		{
			/*fprintf(outfile, "NEWLINE \n");*/
		};


%%


int main(int argc, char const **argv)
{		/*yydebug=1;*/
		infile=stdin;
		outfile=stdout;
		int format=0;
		printf("%d\n", argc);
		if(argc==1){
			
		}else if(argc==2){
			if(!strcmp(argv[1], "-h")){
				printf("usage: rabu-as [-h|infile [outfile [t|b]]]\n");
				exit(0);
			}else{
				infile=fopen(argv[1],"r");
				if(infile==NULL){
					printf("Unable to open file %s. Exiting.\n", argv[1]);
					exit(1);
				}
			}
		}else if(argc==3 || argc == 4){
			infile=fopen(argv[1],"r");
				if(infile==NULL){
					printf("Unable to open file %s. Exiting.\n", argv[1]);
					exit(1);
				}
			outfile=fopen(argv[2],"w");
				if(outfile==NULL){
					printf("Unable to create file %s. Exiting.\n", argv[2]);
					exit(1);
				}
			if(argc==4){
				format=argv[3][0]=='b';
			}

		}else{
			printf("Uncorrect number of arguments.\n");
			exit(1);
		}
		fprintf(outfile, "v2.0 raw\n");
		yyset_in(infile);
		keked=malloc(sizeof(ASMPARAMS));
		keked->instr=malloc(64);
		keked->op1=malloc(64);
		keked->op2=malloc(64);
		keked->label=malloc(64);
		labels=malloc(1*sizeof(label));
		keked->line=0;
		keked->instr_count=0;
        yyparse();
        free(labels);
        free(keked->label);
        free(keked->op2);
        free(keked->op1);
        free(keked->instr);
        free(keked);
        return 0;
} 

